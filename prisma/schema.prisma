// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // ou "mysql", "sqlite", etc.
  url = env("BANCO_URL")
}

enum CategoryStatus {
  ACTIVE
  INACTIVE
}

model Gift {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Decimal
  imageUrl    String?
  status      String   @default("available") // available, reserved
  reservedBy  String?  // Nome de quem reservou
  createdAt   DateTime @default(now())    
}

model Product {
  id            String     @id @default(uuid())
  nameProduct          String     @unique
  quantity      Int        @default(0)
  costPrice     Decimal    @default(0.0)
  salePrice     Decimal    @default(0.0)
  status        ProductStatus @default(ACTIVE)

  categoryId    String?
  category      Category?  @relation(fields: [categoryId], references: [id])

  supplierId    String?
  supplier      Supplier?  @relation(fields: [supplierId], references: [id])
  
  description   String?

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  deletedAt     DateTime?

  inventory     Inventory?

  @@index([nameProduct])
  @@index([status])
  @@index([categoryId])
  @@index([supplierId])
}


model Category {
    id String @id @default(uuid())
    name String
    description String?
    status CategoryStatus
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name], map: "idx_category_name")
    @@index([status], map: "idx_category_status")
    Product Product[]
}

model Supplier {
  id        String    @id @default(cuid())
  name      String    @unique
  email     String?   @unique
  phone     String?
  address   String?
  createdAt DateTime  @default(now())

  Product Product[]
}

model Inventory {
  id        String    @id @default(cuid())
  productId String    @unique
  quantity  Int       @default(0)
  minStock  Int       @default(10)
  product   Product   @relation(fields: [productId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([quantity])
}

model Company {
  id        String    @id @default(cuid())
  name      String    @unique
  email     String?   @unique
  phone     String?
  address   String?
  cpnj    String?   @unique
  createdAt DateTime  @default(now())

  Users Users[]
  company CompanyPlan?
}

model Modules {
  id        String    @id @default(cuid())
  name      String
  module_key String
  description String
}


model PlanModules {
  id    String  @id @default(cuid())
  plan_type String
  module_key String
  is_active Boolean
  permission String[] 
}

model Users {
  id    String @id @default(cuid())
  email String
  password_hash String
  name String
  company_id  String
  role String
  is_active Boolean
  createdAt DateTime  @default(now())
  
  company Company? @relation(fields: [company_id], references: [id])
}

model Plan {
  id        String   @id @default(cuid())
  name      String   @unique
  description  String?
  createdAt DateTime @default(now())

  module PlanModule[]
  companyPlans CompanyPlan[]
}

model Module {
  id       String  @id @default(cuid())
  name     String
  module_key String   @unique
  description String?


  planModule PlanModule[]
}

model PlanModule {
  id         String   @id @default(cuid())
  planId     String
  moduleId   String
  isActive   Boolean  @default(true)
  permission String[] // Ex: ["READ", "WRITE"]

  plan   Plan   @relation(fields: [planId], references: [id])
  module Module @relation(fields: [moduleId], references: [id])
}

model CompanyPlan {
  id         String   @id @default(cuid())
  company_id  String   @unique
  planId     String
  startDate  DateTime @default(now())
  endDate    DateTime?

  company Company @relation(fields: [company_id], references: [id])
  plan    Plan    @relation(fields: [planId], references: [id])
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
}

